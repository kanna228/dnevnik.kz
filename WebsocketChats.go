package main

import (
	"context"
	"encoding/json"
	"io"
	"log"
	"net/http"
	"strings"
	"time"

	"github.com/golang-jwt/jwt/v5"
	"github.com/gorilla/websocket"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
	"go.mongodb.org/mongo-driver/mongo"
)

// Chat —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —á–∞—Ç–∞
type Chat struct {
	ID        primitive.ObjectID `bson:"_id,omitempty" json:"id,omitempty"` // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —á–∞—Ç–∞
	StudentID primitive.ObjectID `bson:"student_id" json:"student_id"`      // ID —Å—Ç—É–¥–µ–Ω—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞–ª —á–∞—Ç
	Title     string             `bson:"title" json:"title"`                // –ù–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞, –∑–∞–¥–∞–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
	Messages  []Message          `bson:"messages" json:"messages"`          // –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
	Status    string             `bson:"status" json:"status"`              // –°—Ç–∞—Ç—É—Å —á–∞—Ç–∞ (active, closed)
	CreatedAt time.Time          `bson:"created_at" json:"created_at"`      // –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞
}

// Message —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
type Message struct {
	SenderID  primitive.ObjectID `bson:"sender_id" json:"sender_id"`
	Content   string             `bson:"content" json:"content"`
	Timestamp time.Time          `bson:"timestamp" json:"timestamp"`
	ChatID    primitive.ObjectID `bson:"chat_id" json:"chat_id"`
	Username  string             `bson:"username" json:"username"` // –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
}

// CreateChatHandler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞
func CreateChatHandler(w http.ResponseWriter, r *http.Request) {
	// –†–∞–∑—Ä–µ—à–∞–µ–º CORS
	w.Header().Set("Access-Control-Allow-Origin", "*")
	w.Header().Set("Content-Type", "application/json")

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–µ—Ä–µ–¥–∞–Ω –ª–∏ —Ç–æ–∫–µ–Ω
	authHeader := r.Header.Get("Authorization")
	if authHeader == "" {
		log.Println("‚ùå Unauthorized: no token")
		http.Error(w, "Unauthorized: no token", http.StatusUnauthorized)
		return
	}

	// –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–∫–µ–Ω
	tokenString := strings.TrimPrefix(authHeader, "Bearer ")

	// –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
	claims := &Claims{}
	token, err := jwt.ParseWithClaims(tokenString, claims, func(token *jwt.Token) (interface{}, error) {
		return jwtKey, nil
	})

	if err != nil || !token.Valid {
		log.Println("‚ùå Unauthorized: invalid token")
		http.Error(w, "Unauthorized: invalid token", http.StatusUnauthorized)
		return
	}

	// –õ–æ–≥–∏—Ä—É–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–æ–∫–µ–Ω–∞
	log.Println("‚úÖ Extracted User ID from token:", claims.UserID)

	// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º `student_id` –≤ `ObjectID`
	studentObjectID, err := primitive.ObjectIDFromHex(claims.UserID)
	if err != nil {
		log.Println("‚ùå Invalid user ID:", claims.UserID)
		http.Error(w, "Invalid user ID", http.StatusBadRequest)
		return
	}

	// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ —á–∞—Ç–æ–≤
	collection := GetChatsCollection()
	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç —É —Å—Ç—É–¥–µ–Ω—Ç–∞
	var existingChat Chat
	err = collection.FindOne(ctx, bson.M{"student_id": studentObjectID, "status": "active"}).Decode(&existingChat)
	if err == nil {
		log.Println("‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç:", existingChat.ID.Hex())
		http.Error(w, "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç", http.StatusConflict)
		return
	}

	// –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
	var requestData struct {
		Title string `json:"title"`
	}
	body, _ := io.ReadAll(r.Body) // –ß–∏—Ç–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
	log.Println("üì• –ü–æ–ª—É—á–µ–Ω–Ω–æ–µ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:", string(body))

	if err := json.Unmarshal(body, &requestData); err != nil {
		log.Println("‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ JSON:", err)
		http.Error(w, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö", http.StatusBadRequest)
		return
	}

	log.Println("‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ —á–∞—Ç–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º:", requestData.Title)

	// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —á–∞—Ç
	newChat := Chat{
		ID:        primitive.NewObjectID(),
		StudentID: studentObjectID,
		Title:     requestData.Title,
		Messages:  []Message{},
		Status:    "active",
		CreatedAt: time.Now(),
	}

	_, err = collection.InsertOne(ctx, newChat)
	if err != nil {
		log.Println("‚ùå –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –≤ MongoDB:", err)
		http.Error(w, "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞", http.StatusInternalServerError)
		return
	}

	log.Println("‚úÖ –ß–∞—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω —Å ID:", newChat.ID.Hex())

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
	w.WriteHeader(http.StatusCreated)
	json.NewEncoder(w).Encode(map[string]string{
		"message": "–ß–∞—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω",
		"chat_id": newChat.ID.Hex(),
	})
}
func GetChatsHandler(w http.ResponseWriter, r *http.Request) {
	// –†–∞–∑—Ä–µ—à–∞–µ–º CORS
	w.Header().Set("Access-Control-Allow-Origin", "*")
	w.Header().Set("Content-Type", "application/json")

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–µ—Ä–µ–¥–∞–Ω –ª–∏ —Ç–æ–∫–µ–Ω
	authHeader := r.Header.Get("Authorization")
	if authHeader == "" {
		http.Error(w, "Unauthorized: no token", http.StatusUnauthorized)
		return
	}

	// –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–∫–µ–Ω
	tokenString := strings.TrimPrefix(authHeader, "Bearer ")

	// –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
	claims := &Claims{}
	token, err := jwt.ParseWithClaims(tokenString, claims, func(token *jwt.Token) (interface{}, error) {
		return jwtKey, nil
	})

	if err != nil || !token.Valid {
		http.Error(w, "Unauthorized: invalid token", http.StatusUnauthorized)
		return
	}

	// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º `UserID` –≤ `ObjectID`
	userID, err := primitive.ObjectIDFromHex(claims.UserID)
	if err != nil {
		http.Error(w, "Invalid user ID", http.StatusBadRequest)
		return
	}

	// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ —á–∞—Ç–æ–≤
	collection := GetChatsCollection()
	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()

	// –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã
	var filter bson.M
	if claims.Role == "student" {
		// –°—Ç—É–¥–µ–Ω—Ç –≤–∏–¥–∏—Ç —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã
		filter = bson.M{"student_id": userID, "status": "active"}
	} else {
		// –£—á–∏—Ç–µ–ª—å –≤–∏–¥–∏—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã
		filter = bson.M{"status": "active"}
	}

	// –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ MongoDB
	cursor, err := collection.Find(ctx, filter)
	if err != nil {
		http.Error(w, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞—Ç–æ–≤", http.StatusInternalServerError)
		return
	}
	defer cursor.Close(ctx)

	var chats []Chat
	if err = cursor.All(ctx, &chats); err != nil {
		http.Error(w, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö", http.StatusInternalServerError)
		return
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º JSON —Å —á–∞—Ç–∞–º–∏
	w.WriteHeader(http.StatusOK)
	json.NewEncoder(w).Encode(chats)
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
func addMessageToChat(chatID primitive.ObjectID, message Message) (*mongo.UpdateResult, error) {
	// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ —á–∞—Ç–æ–≤
	collection := GetChatsCollection()
	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()

	// –û–±–Ω–æ–≤–ª—è–µ–º —á–∞—Ç: –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –º–∞—Å—Å–∏–≤ Messages
	update := bson.M{
		"$push": bson.M{
			"messages": message,
		},
	}

	// –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
	return collection.UpdateOne(ctx, bson.M{"_id": chatID}, update)
}

// –•—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞
var chatConnections = make(map[primitive.ObjectID][]*websocket.Conn)

var upgrader = websocket.Upgrader{
	CheckOrigin: func(r *http.Request) bool {
		// –†–∞–∑—Ä–µ—à–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å –ª—é–±—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
		return true
	},
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π WebSocket
func handleConnections(w http.ResponseWriter, r *http.Request) {
	ws, err := upgrader.Upgrade(w, r, nil)
	if err != nil {
		log.Println("–û—à–∏–±–∫–∞ WebSocket:", err)
		return
	}
	defer ws.Close()

	// –ò–∑–≤–ª–µ–∫–∞–µ–º chat_id –∏–∑ query –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
	chatId := r.URL.Query().Get("chat_id")
	if chatId == "" {
		log.Println("–û—à–∏–±–∫–∞: chat_id –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω")
		return
	}

	// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º chat_id –≤ ObjectID
	chatObjectID, err := primitive.ObjectIDFromHex(chatId)
	if err != nil {
		log.Println("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç chat_id")
		return
	}

	log.Printf("–ü–æ–¥–∫–ª—é—á–µ–Ω –∫ —á–∞—Ç—É %s", chatId)

	// –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
	chatConnections[chatObjectID] = append(chatConnections[chatObjectID], ws)

	for {
		var message Message
		err := ws.ReadJSON(&message)
		if err != nil {
			log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", err)
			break
		}

		// –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
		message.Timestamp = time.Now()
		message.ChatID = chatObjectID

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
		updateResult, err := addMessageToChat(chatObjectID, message)
		if err != nil {
			log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç:", err)
			continue
		}

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º –≤ —ç—Ç–æ–º —á–∞—Ç–µ
		for _, conn := range chatConnections[chatObjectID] {
			err := conn.WriteJSON(message)
			if err != nil {
				log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:", err)
				break
			}
		}

		log.Printf("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç. –û–±–Ω–æ–≤–ª–µ–Ω–æ %v —á–∞—Ç–æ–≤.", updateResult.ModifiedCount)
	}
}

func getChatHistoryHandler(w http.ResponseWriter, r *http.Request) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–µ—Ä–µ–¥–∞–Ω –ª–∏ —Ç–æ–∫–µ–Ω
	authHeader := r.Header.Get("Authorization")
	if authHeader == "" {
		http.Error(w, "Unauthorized: no token", http.StatusUnauthorized)
		return
	}

	// –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–∫–µ–Ω
	tokenString := strings.TrimPrefix(authHeader, "Bearer ")

	// –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
	claims := &Claims{}
	token, err := jwt.ParseWithClaims(tokenString, claims, func(token *jwt.Token) (interface{}, error) {
		return jwtKey, nil
	})

	if err != nil || !token.Valid {
		http.Error(w, "Unauthorized: invalid token", http.StatusUnauthorized)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º chat_id –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞
	chatId := r.URL.Query().Get("chat_id")
	if chatId == "" {
		http.Error(w, "chat_id is required", http.StatusBadRequest)
		return
	}

	chatObjectID, err := primitive.ObjectIDFromHex(chatId)
	if err != nil {
		http.Error(w, "Invalid chat_id format", http.StatusBadRequest)
		return
	}

	// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ —á–∞—Ç–æ–≤
	collection := GetChatsCollection()
	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()

	var chat Chat
	err = collection.FindOne(ctx, bson.M{"_id": chatObjectID}).Decode(&chat)
	if err != nil {
		http.Error(w, "Chat not found", http.StatusNotFound)
		return
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞
	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(chat.Messages)
}

// CloseChatHandler –ø–µ—Ä–µ–≤–æ–¥–∏—Ç —á–∞—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ "closed"
func CloseChatHandler(w http.ResponseWriter, r *http.Request) {
	// –†–∞–∑—Ä–µ—à–∞–µ–º CORS –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∏–ø –æ—Ç–≤–µ—Ç–∞
	w.Header().Set("Access-Control-Allow-Origin", "*")
	w.Header().Set("Content-Type", "application/json")

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
	authHeader := r.Header.Get("Authorization")
	if authHeader == "" {
		log.Println("‚ùå Unauthorized: no token")
		http.Error(w, "Unauthorized: no token", http.StatusUnauthorized)
		return
	}
	tokenString := strings.TrimPrefix(authHeader, "Bearer ")

	// –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
	claims := &Claims{}
	token, err := jwt.ParseWithClaims(tokenString, claims, func(token *jwt.Token) (interface{}, error) {
		return jwtKey, nil
	})
	if err != nil || !token.Valid {
		log.Println("‚ùå Unauthorized: invalid token")
		http.Error(w, "Unauthorized: invalid token", http.StatusUnauthorized)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º chat_id –∏–∑ query-–ø–∞—Ä–∞–º–µ—Ç—Ä–∞
	chatId := r.URL.Query().Get("chat_id")
	if chatId == "" {
		http.Error(w, "chat_id is required", http.StatusBadRequest)
		return
	}
	chatObjectID, err := primitive.ObjectIDFromHex(chatId)
	if err != nil {
		http.Error(w, "Invalid chat_id format", http.StatusBadRequest)
		return
	}

	// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ —á–∞—Ç–æ–≤
	collection := GetChatsCollection()
	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()

	// –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É, —á—Ç–æ —á–∞—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

	// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —á–∞—Ç–∞ –Ω–∞ "closed"
	update := bson.M{
		"$set": bson.M{
			"status": "closed",
		},
	}

	updateResult, err := collection.UpdateOne(ctx, bson.M{"_id": chatObjectID}, update)
	if err != nil || updateResult.ModifiedCount == 0 {
		log.Println("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å —á–∞—Ç:", err)
		http.Error(w, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å —á–∞—Ç", http.StatusInternalServerError)
		return
	}

	log.Printf("‚úÖ –ß–∞—Ç %s —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç", chatId)
	json.NewEncoder(w).Encode(map[string]string{
		"message": "–ß–∞—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç",
		"chat_id": chatId,
	})
}
