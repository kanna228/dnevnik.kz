package main

import (
	"context"
	"encoding/json"
	"io"
	"log"
	"net/http"
	"strings"
	"time"

	"github.com/golang-jwt/jwt/v5"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
)

// Chat —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —á–∞—Ç–∞
type Chat struct {
	ID        primitive.ObjectID `bson:"_id,omitempty" json:"id,omitempty"` // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —á–∞—Ç–∞
	StudentID primitive.ObjectID `bson:"student_id" json:"student_id"`      // ID —Å—Ç—É–¥–µ–Ω—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞–ª —á–∞—Ç
	Title     string             `bson:"title" json:"title"`                // –ù–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞, –∑–∞–¥–∞–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
	Messages  []Message          `bson:"messages" json:"messages"`          // –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
	Status    string             `bson:"status" json:"status"`              // –°—Ç–∞—Ç—É—Å —á–∞—Ç–∞ (active, closed)
	CreatedAt time.Time          `bson:"created_at" json:"created_at"`      // –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞
}

// Message —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
type Message struct {
	SenderID  primitive.ObjectID `bson:"sender_id" json:"sender_id"` // ID –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è (—É—á–∏—Ç–µ–ª—å –∏–ª–∏ —Å—Ç—É–¥–µ–Ω—Ç)
	Content   string             `bson:"content" json:"content"`     // –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
	Timestamp time.Time          `bson:"timestamp" json:"timestamp"` // –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏
}

// CreateChatHandler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞
func CreateChatHandler(w http.ResponseWriter, r *http.Request) {
	// –†–∞–∑—Ä–µ—à–∞–µ–º CORS
	w.Header().Set("Access-Control-Allow-Origin", "*")
	w.Header().Set("Content-Type", "application/json")

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–µ—Ä–µ–¥–∞–Ω –ª–∏ —Ç–æ–∫–µ–Ω
	authHeader := r.Header.Get("Authorization")
	if authHeader == "" {
		log.Println("‚ùå Unauthorized: no token")
		http.Error(w, "Unauthorized: no token", http.StatusUnauthorized)
		return
	}

	// –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–∫–µ–Ω
	tokenString := strings.TrimPrefix(authHeader, "Bearer ")

	// –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
	claims := &Claims{}
	token, err := jwt.ParseWithClaims(tokenString, claims, func(token *jwt.Token) (interface{}, error) {
		return jwtKey, nil
	})

	if err != nil || !token.Valid {
		log.Println("‚ùå Unauthorized: invalid token")
		http.Error(w, "Unauthorized: invalid token", http.StatusUnauthorized)
		return
	}

	// –õ–æ–≥–∏—Ä—É–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–æ–∫–µ–Ω–∞
	log.Println("‚úÖ Extracted User ID from token:", claims.UserID)

	// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º `student_id` –≤ `ObjectID`
	studentObjectID, err := primitive.ObjectIDFromHex(claims.UserID)
	if err != nil {
		log.Println("‚ùå Invalid user ID:", claims.UserID)
		http.Error(w, "Invalid user ID", http.StatusBadRequest)
		return
	}

	// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ —á–∞—Ç–æ–≤
	collection := GetChatsCollection()
	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç —É —Å—Ç—É–¥–µ–Ω—Ç–∞
	var existingChat Chat
	err = collection.FindOne(ctx, bson.M{"student_id": studentObjectID, "status": "active"}).Decode(&existingChat)
	if err == nil {
		log.Println("‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç:", existingChat.ID.Hex())
		http.Error(w, "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç", http.StatusConflict)
		return
	}

	// –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
	var requestData struct {
		Title string `json:"title"`
	}
	body, _ := io.ReadAll(r.Body) // –ß–∏—Ç–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
	log.Println("üì• –ü–æ–ª—É—á–µ–Ω–Ω–æ–µ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:", string(body))

	if err := json.Unmarshal(body, &requestData); err != nil {
		log.Println("‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ JSON:", err)
		http.Error(w, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö", http.StatusBadRequest)
		return
	}

	log.Println("‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ —á–∞—Ç–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º:", requestData.Title)

	// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —á–∞—Ç
	newChat := Chat{
		ID:        primitive.NewObjectID(),
		StudentID: studentObjectID,
		Title:     requestData.Title,
		Messages:  []Message{},
		Status:    "active",
		CreatedAt: time.Now(),
	}

	_, err = collection.InsertOne(ctx, newChat)
	if err != nil {
		log.Println("‚ùå –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –≤ MongoDB:", err)
		http.Error(w, "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞", http.StatusInternalServerError)
		return
	}

	log.Println("‚úÖ –ß–∞—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω —Å ID:", newChat.ID.Hex())

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
	w.WriteHeader(http.StatusCreated)
	json.NewEncoder(w).Encode(map[string]string{
		"message": "–ß–∞—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω",
		"chat_id": newChat.ID.Hex(),
	})
}
func GetChatsHandler(w http.ResponseWriter, r *http.Request) {
	// –†–∞–∑—Ä–µ—à–∞–µ–º CORS
	w.Header().Set("Access-Control-Allow-Origin", "*")
	w.Header().Set("Content-Type", "application/json")

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–µ—Ä–µ–¥–∞–Ω –ª–∏ —Ç–æ–∫–µ–Ω
	authHeader := r.Header.Get("Authorization")
	if authHeader == "" {
		http.Error(w, "Unauthorized: no token", http.StatusUnauthorized)
		return
	}

	// –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–∫–µ–Ω
	tokenString := strings.TrimPrefix(authHeader, "Bearer ")

	// –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
	claims := &Claims{}
	token, err := jwt.ParseWithClaims(tokenString, claims, func(token *jwt.Token) (interface{}, error) {
		return jwtKey, nil
	})

	if err != nil || !token.Valid {
		http.Error(w, "Unauthorized: invalid token", http.StatusUnauthorized)
		return
	}

	// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º `UserID` –≤ `ObjectID`
	userID, err := primitive.ObjectIDFromHex(claims.UserID)
	if err != nil {
		http.Error(w, "Invalid user ID", http.StatusBadRequest)
		return
	}

	// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ —á–∞—Ç–æ–≤
	collection := GetChatsCollection()
	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()

	// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ç—É–¥–µ–Ω—Ç, –æ–Ω –≤–∏–¥–∏—Ç —Ç–æ–ª—å–∫–æ —Å–≤–æ–π —á–∞—Ç, –∏–Ω–∞—á–µ —É—á–∏—Ç–µ–ª—å –≤–∏–¥–∏—Ç –≤—Å–µ
	var filter bson.M
	if claims.Role == "student" {
		filter = bson.M{"student_id": userID}
	} else {
		filter = bson.M{} // –£—á–∏—Ç–µ–ª—å –≤–∏–¥–∏—Ç –≤—Å–µ —á–∞—Ç—ã
	}

	// –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ MongoDB
	cursor, err := collection.Find(ctx, filter)
	if err != nil {
		http.Error(w, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞—Ç–æ–≤", http.StatusInternalServerError)
		return
	}
	defer cursor.Close(ctx)

	var chats []Chat
	if err = cursor.All(ctx, &chats); err != nil {
		http.Error(w, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö", http.StatusInternalServerError)
		return
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º JSON —Å —á–∞—Ç–∞–º–∏
	w.WriteHeader(http.StatusOK)
	json.NewEncoder(w).Encode(chats)
}
